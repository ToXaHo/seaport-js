import * as secrets from '../../../../secrets.json'
import {Seaport} from "../../src/Seaport";
import {SeaportSDK} from "../../src/index";


const seller = '0x9F7A946d935c8Efc7A8329C0d894A69bA241345A'
const buyer = '0x0A56b3317eD60dC4E1027A63ffbE9df6fb102401'


;(async () => {
        try {
            const wallet = {
                chainId: 4,
                address: seller,
                privateKeys: secrets.privateKeys
            }
            const seaport = new Seaport(wallet)

            const fragments = seaport.exchange.interface.fragments
            // const callData = "0xe7acab24000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e282f7d52da0e27d188732abf1fa02450d28cd4100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000ef708d45cc7a517faad9b36c2c1fb7e693da5e44000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000062a970530000000000000000000000000000000000000000000000000000000062aac1d300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000124a5206323ad920000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000054616c0815c306fc22417b96282ca4aa6f47d35700000000000000000000000000000000000000000000000000000000000020b700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002df69673c81800000000000000000000000000000000000000000000000000002df69673c818000000000000000000000000000ef708d45cc7a517faad9b36c2c1fb7e693da5e4400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000146d983375600000000000000000000000000000000000000000000000000000146d98337560000000000000000000000000005b3256965e7c3cf26e11fcaf296dfc8807c01073000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d48c89a602000000000000000000000000000000000000000000000000000003d48c89a6020000000000000000000000000003213579537bc370b5a1e22eeb3a60aa5bb954c930000000000000000000000000000000000000000000000000000000000000041a6e25f25d16061d70c209f2991a30f51f83bfca95f2b1acb314362476bfb70b37df79224e95315cbd89bdc4ef3cdaf469f2f81628ab69622e53f56cad69c24ad1c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            const callData = "0xe7acab240000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a56b3317ed60dc4e1027a63ffbe9df6fb10240100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005a00000000000000000000000006f3258f5b99f9846c9f7b5031c3b02b943e3318d00000000000000000000000000000000e88fe2628ebc5da81d2b3cead633e89e0000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000062ab21bb0000000000000000000000000000000000000000000000000000000062d2aebb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006034c9ec8a77970000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000f01900e7506e537756525b2c10d119a7afefa17b724000000000000000000000000000000000000000000000000000004fefa17b7240000000000000000000000000006f3258f5b99f9846c9f7b5031c3b02b943e3318d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000008de9c5a032463c561423387a9648c5c7bcc5bc900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a94d74f430000000000000000000000000000000000000000000000000000006a94d74f430000000000000000000000000006f3258f5b99f9846c9f7b5031c3b02b943e3318d0000000000000000000000000000000000000000000000000000000000000041c53eb20321f899950db9a9b03c6689f8d88d23b653f5d253123b3fadd810911d5a9108fa1e2176860b0e5a76905ee46f90a6312dee910ae329b2f08ca4c817641c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
            for (const frag of fragments) {
                if (frag.type != "function") continue
                const sighash = seaport.exchange.interface.getSighash(frag.name)
                // console.log(frag.name, seaport.exchange.interface.getSighash(frag.name))
                if (callData.substring(0, 10) == sighash) {
                    console.log(frag.name, seaport.exchange.interface.getSighash(frag.name))
                    // console.log(frag.format('full'), '\n')
                    const functionData = seaport.exchange.interface.decodeFunctionData(frag.name, callData)

                    // "ConsiderationItem(",
                    //     "uint8 itemType,",
                    //     "address token,",
                    //     "uint256 identifierOrCriteria,",
                    //     "uint256 startAmount,",
                    //     "uint256 endAmount,",
                    //     "address recipient",
                    //     ")"
                    // struct AdvancedOrder {
                    //     OrderParameters parameters;
                    //     uint120 numerator;
                    //     uint120 denominator;
                    //     bytes signature;
                    //     bytes extraData;
                    // }

                    //    AdvancedOrder calldata advancedOrder,
                    //     CriteriaResolver[] calldata criteriaResolvers,
                    //     bytes32 fulfillerConduitKey,
                    //     address recipient

                    console.log("1.advancedOrder:AdvancedOrder")
                    const order = functionData.advancedOrder
                    // for (const order of functionData.advancedOrder) {

                    for (const param of frag.inputs[0].components) {
                        if (param.name == "parameters") {
                            console.log(" parameters:")
                            for (const val of param.components) {
                                if (val.name == "offer") {
                                    console.log("  offer[]:")
                                    for (const offer of order.parameters.offer) {
                                        const itemType = offer.itemType.toString()
                                        const token = offer.token.toString()
                                        const identifierOrCriteria = offer.identifierOrCriteria.toString()
                                        const startAmount = offer.startAmount.toString()
                                        const endAmount = offer.endAmount.toString()
                                        console.log(`     {itemType:'${itemType}',token:'${token}',identifierOrCriteria:'${identifierOrCriteria}',startAmount:'${startAmount}',endAmount:'${endAmount}'}`)
                                    }
                                } else if (val.name == "consideration") {
                                    console.log("  consideration[]:")
                                    // "ConsiderationItem(",
                                    for (const consider of order.parameters.consideration) {
                                        const itemType = consider.itemType.toString()
                                        const token = consider.token.toString()
                                        const identifierOrCriteria = consider.identifierOrCriteria.toString()
                                        const startAmount = consider.startAmount.toString()
                                        const endAmount = consider.endAmount.toString()
                                        const recipient = consider.recipient.toString()
                                        console.log(`     {itemType:'${itemType}',token:'${token}',identifierOrCriteria:'${identifierOrCriteria}',startAmount:'${startAmount}',endAmount:'${endAmount}',recipient:'${recipient}'}`)
                                    }
                                } else {
                                    console.log(`  ${val.name}:'${order.parameters[val.name].toString()}',`)
                                }

                            }
                        } else {
                            console.log(` ${param.name}:'${order[param.name]}',`)
                        }
                    }
                    // }
                    // struct CriteriaResolver {
                    //     uint256 orderIndex;
                    //     Side side;
                    //     uint256 index;
                    //     uint256 identifier;
                    //     bytes32[] criteriaProof;
                    // }
                    console.log("2.criteriaResolvers:CriteriaResolver[]")
                    for (const resolver of functionData.criteriaResolvers) {
                        for (const param of frag.inputs[1].components) {
                            console.log(`${param.name}:'${resolver[param.name].toString()}',`)
                        }
                    }

                    console.log("3.fulfillerConduitKey:", functionData.fulfillerConduitKey)
                    console.log("4.recipient:", functionData.recipient)
                }
            }
        } catch (e) {
            console.log(e)
        }
    }
)()


// fulfillAdvancedOrder 0xe7acab24
// 1.advancedOrder:AdvancedOrder
// parameters:
//     offerer:'0x6F3258f5B99f9846C9f7b5031c3b02B943e3318d',
//         zone:'0x00000000E88FE2628EbC5DA81d2b3CeaD633E89e',
//     offer[]:
// {itemType:'2',token:'0xF01900e7506E537756525B2c10d119A7A5058441',identifierOrCriteria:'1',startAmount:'1',endAmount:'1'}
// consideration[]:
// {itemType:'0',token:'0x0000000000000000000000000000000000000000',identifierOrCriteria:'0',startAmount:'22500000000000000',endAmount:'22500000000000000',recipient:'0x6F3258f5B99f9846C9f7b5031c3b02B943e3318d'}
// {itemType:'0',token:'0x0000000000000000000000000000000000000000',identifierOrCriteria:'0',startAmount:'625000000000000',endAmount:'625000000000000',recipient:'0x8De9C5A032463C561423387a9648c5C7BCC5BC90'}
// {itemType:'0',token:'0x0000000000000000000000000000000000000000',identifierOrCriteria:'0',startAmount:'1875000000000000',endAmount:'1875000000000000',recipient:'0x6F3258f5B99f9846C9f7b5031c3b02B943e3318d'}
// orderType:'2',
//     startTime:'1655382459',
//     endTime:'1657974459',
//     zoneHash:'0x0000000000000000000000000000000000000000000000000000000000000000',
//     salt:'27079639625791383',
//     conduitKey:'0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000',
//     totalOriginalConsiderationItems:'3',
//     numerator:'1',
//     denominator:'1',
//     signature:'0xc53eb20321f899950db9a9b03c6689f8d88d23b653f5d253123b3fadd810911d5a9108fa1e2176860b0e5a76905ee46f90a6312dee910ae329b2f08ca4c817641c',
//     extraData:'0x',
//     2.criteriaResolvers:CriteriaResolver[]
// 3.fulfillerConduitKey: 0x0000000000000000000000000000000000000000000000000000000000000000
// 4.recipient: 0x0A56b3317eD60dC4E1027A63ffbE9df6fb102401

